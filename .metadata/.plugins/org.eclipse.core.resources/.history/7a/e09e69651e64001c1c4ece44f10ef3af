import java.math.BigInteger;
import java.util.List;
import java.util.stream.Stream;
		
public class Main2 {

	public static void main(String[] args) {

//----------------------------------------------------------
//BREAK CAMEL CASE		
/*		
		String camel = "camelCasing";
		System.out.println(Solution.camelCase(camel));			
	}

}
class Solution {
	  public static String camelCase(String input) {
	
		  String out = "";
	
		 for(int i = 0 ; i< input.length(); i ++) {
			 char ch = input.charAt(i);
				if(ch>='a' && ch<='z') out+= ch;
				if(ch>='A' && ch<='Z') out+= " "+ch;	
		 }
		  			   
		  return out;
		  //  return input.replaceAll("([A-Z])", " $1");  //Esto solo  
	  }
	}
//-----------------------------------------
*/
//REGEX (REGULAR EXPRESSIONS) EXAMPLES
//		
//		String reg = "A bAA  cAAA,dAAAA.eAAAA32";
//		// Removes whitespace between a word character and . or ,
//		String pattern = "(\\w)(\\s+)([\\.,])";
//		System.out.println(reg.replaceAll(pattern, "$1$3"));
//------------------------------------------------------
//COUNT A SPIRAL
/*		
		BigInteger sp = new BigInteger("8");	
	System.out.println(Spiral.sum(sp))	;
		
		}	
	}
	//5,4,4,2,2
	//7,6,6,4,4,2,2
	//8,7,7,5,5,3,3,1
//Tengo que hacer que a mi numero se le sume el anterior dos veces y que se le sume a los dos anteriores dos veces del anterior a mi numero de manera 
//repetida hasta que el resultado sea mayor que cero


class Spiral {
		    public static BigInteger sum(BigInteger size) {
		    	

		   // 	return size.add(BigInteger.ONE).pow(2).shiftRight(1).subtract(BigInteger.ONE);
		
		    	   BigInteger res = size.multiply(size).divide(new BigInteger("2"));
		    	      if ( size.mod(new BigInteger("2")).equals(BigInteger.ZERO)){
		    	        return res.add(size).subtract(BigInteger.ONE);
		    	      }
		    	        return res.add(size);
		    }
		}
*/		
//---------------------------------------------		
//Kingdoms Ep4: The Dancing Witch	
		
		String[] ex1 = {"a b", " ba"};
		String[] ex2 = {"ab kl", "ba kl", "a blk"};
		String[] ex3 ={"hop", "hpo", "pho"};	
		
		Kata.figureOut(ex1);
//		System.out.println(Kata.figureOut(ex1));
//		System.out.println(Kata.figureOut(ex2));
//		System.out.println(Kata.figureOut(ex3));
	}	
}
		class Kata {
		    public static String figureOut(String[] arr) {
		        
		    	List<String>witch= List.of(arr);
		    	Stream<String> filter = witch.stream()
		    				.filter(x-> x.contentEquals(x));
		    					
		    System.out.println(filter);	
		/*    	
		    	String witch = "";
		    	for(int i = 0; i<arr.length;i++) {
		    			if(arr[0].charAt(i)== arr[1].charAt(i+2))  witch+= arr[0].charAt(i);
		    	 System.out.println(witch);
		    	}
		*/    	
		    	return "";
		    }
		}	
		
 
 